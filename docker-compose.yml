services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  studio:
    container_name: prisma-studio
    build: 
      context: .
      dockerfile: packages/db/Dockerfile
    ports:
      - "5555:5555"  # Prisma Studio default port
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
    command: pnpm --filter @my/db db:studio
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:5555"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - 'traefik.http.middlewares.coolify-studio-basicauth.basicauth.users=CHANGEME:CHANGEME' # Replace based on the explanations from coolify documentation: https://coolify.io/docs/knowledge-base/traefik/basic-auth/

  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  web:
    container_name: web
    build: 
      context: .
      dockerfile: apps/web/Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV}
      API_URL: ${API_URL}
      NEXT_PUBLIC_SUPABASE_URL: ${SUPABASE_URL}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      NEXT_PUBLIC_API_URL: ${API_URL}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_URL: ${SUPABASE_URL}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:3000/api/health"]

  api:
    container_name: api
    build: 
      context: .
      dockerfile: apps/server/Dockerfile
    ports:
      - "${API_PORT}:4000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      NODE_ENV: ${NODE_ENV}
      API_PORT: ${API_PORT}
      API_URL: ${API_URL}
      REDIS_URL: redis://redis:${REDIS_PORT}
      TRPC_PANEL_USERNAME: ${TRPC_PANEL_USERNAME}
      TRPC_PANEL_PASSWORD: ${TRPC_PANEL_PASSWORD}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  redis_data:
